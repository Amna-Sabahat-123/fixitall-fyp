const express = require('express');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const path = require('path');
const mongoose = require('mongoose');
const collection = require('./mongodb');

const app = express();

// Middleware
app.set('view engine', 'ejs');
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));
app.use(cookieParser());
app.use(
    session({
        secret: 'your-secret-key',
        resave: false,
        saveUninitialized: false,
        cookie: { maxAge: 1000 * 60 * 60 * 24 }, // 1 day
    })
);

// MongoDB Connection
mongoose
    .connect('mongodb://localhost:27017/signup', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Database connected!'))
    .catch((err) => console.log('Failed to connect to database:', err));

// Routes
app.get('/', (req, res) => res.render('login'));
app.get('/signup', (req, res) => res.render('signup'));
app.get('/home', (req, res) => {
    if (req.session.isLoggedIn) {
        res.render('home', { name: req.session.name });
    } else {
        res.redirect('/');
    }
});

app.post('/signup', async (req, res) => {
    const { name, email, password, terms } = req.body;

    if (!terms) {
        return res.send('You must accept the terms and policy.');
    }

    const existingUser = await collection.findOne({ email });
    if (existingUser) {
        return res.send('User already exists! Please login.');
    }

    const data = { name, email, password };
    await collection.insertMany([data]);

    res.send('Account created successfully! You can now log in.');
});

app.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await collection.findOne({ email });

        if (user && user.password === password) {
            req.session.isLoggedIn = true;
            req.session.name = user.name;
            res.redirect('/home');
        } else {
            res.send('Invalid email or password!');
        }
    } catch {
        res.send('Error occurred during login.');
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/');
});

// Start the Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});


